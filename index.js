const path = require("path");
const express = require("express");
const bcrypt = require("bcryptjs");
require("dotenv").config({ override: true });

const app = express();
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));

const { OpenAI } = require("openai");
const {
  pool,
  testConnection,
  checkUserTableStructure,
  checkHoroscopeTableStructure,
} = require("./database");
const {
  isValidEmail,
  isValidBirthday,
  isValidZodiac,
  isValidPassword,
  ZODIAC_SIGNS,
  logSuccess,
  logError,
  logInfo,
} = require("./utils");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (—Ç–µ–ø–µ—Ä—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏)
function formatDateOnly(date) {
  if (!date) return null;

  console.log("formatDateOnly –≤—Ö–æ–¥:", date, typeof date);

  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof date === "string" && /^\d{4}-\d{2}-\d{2}$/.test(date)) {
    console.log("formatDateOnly: —Å—Ç—Ä–æ–∫–∞ YYYY-MM-DD:", date);
    return date;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –µ—â–µ Date –æ–±—ä–µ–∫—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  if (date instanceof Date) {
    // PostgreSQL DATE –ø–æ–ª—è –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å —Å–¥–≤–∏–Ω—É—Ç—ã
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –¥–Ω—è (12 —á–∞—Å–æ–≤) —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–Ω–µ–π
    const adjustedDate = new Date(date.getTime() + 12 * 60 * 60 * 1000);

    const year = adjustedDate.getUTCFullYear();
    const month = String(adjustedDate.getUTCMonth() + 1).padStart(2, "0");
    const day = String(adjustedDate.getUTCDate()).padStart(2, "0");
    const result = `${year}-${month}-${day}`;

    console.log(
      "formatDateOnly: Date –æ–±—ä–µ–∫—Ç (fallback):",
      date.toISOString(),
      "->",
      result
    );
    return result;
  }

  console.log("formatDateOnly: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:", typeof date);
  return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
console.log(
  "OpenAI API Key:",
  process.env.OPENAI_API_KEY
    ? process.env.OPENAI_API_KEY.substring(0, 20) + "..."
    : "–ù–ï –ù–ê–ô–î–ï–ù"
);

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
testConnection();

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
app.get("/api/check-tables", async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const tablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);

    const tables = tablesResult.rows.map((row) => row.table_name);
    console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:", tables);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    let usersStructure = null;
    if (tables.includes("users")) {
      const usersColumns = await pool.query(`
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = 'users' AND table_schema = 'public'
        ORDER BY ordinal_position
      `);
      usersStructure = usersColumns.rows;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã horoscops
    let horoscopsStructure = null;
    if (tables.includes("horoscops")) {
      const horoscopsColumns = await pool.query(`
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = 'horoscops' AND table_schema = 'public'
        ORDER BY ordinal_position
      `);
      horoscopsStructure = horoscopsColumns.rows;
    }

    res.json({
      success: true,
      tables: tables,
      usersStructure: usersStructure,
      horoscopsStructure: horoscopsStructure,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:", error);
    res.status(500).json({
      success: false,
      message: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü",
      error: error.message,
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get("/api/users", async (req, res) => {
  try {
    const client = await pool.connect();
    const result = await client.query(
      "SELECT id_user, first_name, email, to_char(birthday, 'YYYY-MM-DD') AS birthday, zodiac, subscription, created_at, updated_at FROM users ORDER BY created_at DESC"
    );
    client.release();

    res.json({
      success: true,
      users: result.rows,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({
      success: false,
      message: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      error: error.message,
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post("/api/register", async (req, res) => {
  console.log("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω");
  console.log("üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", req.body);
  console.log("üìã Headers:", req.headers);

  try {
    const { email, name, birthday, zodiac, password } = req.body;

    console.log("‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", {
      email,
      name,
      birthday,
      zodiac,
      password: password ? "***—Å–∫—Ä—ã—Ç***" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: email, name, password –∏ zodiac –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, birthday –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    if (!email || !name || !password || !zodiac) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
      return res.status(400).json({
        success: false,
        message: "All fields are required",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!isValidEmail(email)) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email:", email);
      return res.status(400).json({
        success: false,
        message: "Wrong email format",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (!isValidPassword(password)) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
      return res.status(400).json({
        success: false,
        message: "Password must be at least 6 characters long",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
    if (birthday && !isValidBirthday(birthday)) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:", birthday);
      return res.status(400).json({
        success: false,
        message: "Wrong birthday format",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    if (!isValidZodiac(zodiac)) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞:", zodiac);
      return res.status(400).json({
        success: false,
        message: "Wrong zodiac sign",
      });
    }

    console.log("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    const client = await pool.connect();
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:", email);
      const existingUser = await client.query(
        "SELECT id_user FROM users WHERE email = $1",
        [email]
      );

      if (existingUser.rows.length > 0) {
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        return res.status(400).json({
          success: false,
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
      }

      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");

      // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      console.log("üîê –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å...");
      const saltRounds = 10;
      const passwordHash = await bcrypt.hash(password, saltRounds);
      console.log("‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω");

      console.log("üíæ –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å...");
      console.log("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", [
        name,
        email,
        birthday || null,
        zodiac,
        "***—Å–∫—Ä—ã—Ç***",
        false,
      ]);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã)
      // –î–ª—è –ø–æ–ª—è DATE –≤ PostgreSQL –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Date
      const birthdayForDB = birthday ? birthday : null;

      console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –ë–î:", birthdayForDB);

      const result = await client.query(
        `
        INSERT INTO users (first_name, email, birthday, zodiac, password, subscription, created_at) 
        VALUES ($1, $2, $3, $4, $5, $6, NOW()) 
        RETURNING id_user, first_name, email, to_char(birthday, 'YYYY-MM-DD') AS birthday, zodiac, created_at
      `,
        [name, email, birthdayForDB, zodiac, passwordHash, false]
      );

      console.log("‚úÖ INSERT –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      console.log("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç INSERT:", result.rows[0]);

      const newUser = result.rows[0];
      logSuccess("The new user has been registered:", {
        id: newUser.id_user,
        email: newUser.email,
        name: newUser.first_name,
        zodiac: newUser.zodiac,
      });

      res.json({
        success: true,
        message: "Registration successful!",
        user: {
          id: newUser.id_user,
          email: newUser.email,
          name: newUser.first_name,
          birthday: newUser.birthday,
          zodiac: newUser.zodiac,
        },
      });
    } catch (dbError) {
      logError("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", dbError);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (dbError.code === "23505") {
        // Unique constraint violation
        return res.status(400).json({
          success: false,
          message: "User with this email already exists",
        });
      }

      throw dbError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    } finally {
      client.release();
    }
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    });
  }
});
app.post("/api/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
      });
    }

    const client = await pool.connect();

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º birthday –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    const userResult = await client.query(
      "SELECT id_user, email, first_name, to_char(birthday, 'YYYY-MM-DD') AS birthday, zodiac, password FROM users WHERE email = $1",
      [email]
    );

    client.release();

    if (userResult.rows.length === 0) {
      return res.status(401).json({
        success: false,
        message: "Wrong email or password",
      });
    }

    const user = userResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
      });
    }

    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:", user.email);
    console.log(
      "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –ë–î (—Å—Ç—Ä–æ–∫–∞):",
      user.birthday,
      typeof user.birthday
    );

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –ë–î
    let todayHoroscope = null;
    const today = new Date().toISOString().split("T")[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD

    try {
      const horoscopeClient = await pool.connect();
      const horoscopeResult = await horoscopeClient.query(
        "SELECT response FROM horoscops WHERE id_user = $1 AND horoscop_date = $2",
        [user.id_user, today]
      );

      if (horoscopeResult.rows.length > 0) {
        try {
          const responseData = horoscopeResult.rows[0].response;
          console.log(`üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î:`, typeof responseData);

          console.log(
            `üîç –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:`,
            String(responseData).substring(0, 100)
          );

          // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          if (typeof responseData === "object" && responseData !== null) {
            todayHoroscope = responseData;
            console.log(`‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –æ–±—ä–µ–∫—Ç`);
          } else {
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON
            todayHoroscope = JSON.parse(responseData);
            console.log(`‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ JSON.parse`);
          }

          console.log(
            `‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${today}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`
          );
        } catch (parseError) {
          console.error(
            `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≥–æ—Ä–æ—Å–∫–æ–ø–∞:`,
            parseError.message
          );
          console.error(
            `‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ response:`,
            horoscopeResult.rows[0].response
          );
          todayHoroscope = null;
        }
      } else {
        console.log(
          `‚ÑπÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (${today}) –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`
        );
      }
      horoscopeClient.release();
    } catch (horoscopeError) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        horoscopeError.message
      );
    }

    res.json({
      success: true,
      message: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
      user: {
        id: user.id_user,
        email: user.email,
        name: user.first_name,
        birthday: user.birthday, // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        zodiac: user.zodiac,
      },
      todayHoroscope: todayHoroscope, // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
    });
  }
});

// –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞—Ç
app.get("/api/debug-dates", async (req, res) => {
  try {
    const client = await pool.connect();
    const result = await client.query(
      "SELECT email, to_char(birthday, 'YYYY-MM-DD') AS birthday FROM users WHERE birthday IS NOT NULL LIMIT 3"
    );

    const debugInfo = result.rows.map((row) => ({
      email: row.email,
      rawBirthday: row.birthday,
      birthdayType: typeof row.birthday,
      birthdayString: String(row.birthday),
      formattedBirthday: formatDateOnly(row.birthday),
    }));

    client.release();

    res.json({
      success: true,
      data: debugInfo,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–∞—Ç:", error);
    res.status(500).json({
      success: false,
      error: error.message,
    });
  }
});

// Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post("/api/update-profile", async (req, res) => {
  try {
    const { email, name, birthday, zodiac, password } = req.body;

    if (!email || !name) {
      return res.status(400).json({
        success: false,
        message: "Email and name are required",
      });
    }

    const client = await pool.connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userResult = await client.query(
      "SELECT id_user FROM users WHERE email = $1",
      [email]
    );

    if (userResult.rows.length === 0) {
      client.release();
      return res.status(404).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let updateQuery = "UPDATE users SET first_name = $1";
    let updateParams = [name];
    let paramIndex = 2;

    // birthday –∏ zodiac
    if (birthday) {
      updateQuery += `, birthday = $${paramIndex}`;
      updateParams.push(birthday);
      paramIndex++;
      // zodiac –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ req.body
      if (zodiac) {
        updateQuery += `, zodiac = $${paramIndex}`;
        updateParams.push(zodiac);
        paramIndex++;
      }
    } else {
      // birthday –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, zodiac –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
      updateQuery += `, birthday = NULL`;
      if (zodiac) {
        updateQuery += `, zodiac = $${paramIndex}`;
        updateParams.push(zodiac);
        paramIndex++;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      updateQuery += `, password = $${paramIndex}`;
      updateParams.push(hashedPassword);
      paramIndex++;
    }

    updateQuery += ` WHERE email = $${paramIndex}`;
    updateParams.push(email);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await client.query(updateQuery, updateParams);

    client.release();

    console.log("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:", email);

    res.json({
      success: true,
      message: "The profile has been successfully updated!",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è",
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/user-horoscopes/:userId", async (req, res) => {
  try {
    const userId = req.params.userId;

    const client = await pool.connect();
    const result = await client.query(
      `
      SELECT h.*, u.first_name, u.zodiac 
      FROM horoscops h 
      JOIN users u ON h.id_user = u.id_user 
      WHERE h.id_user = $1 
      ORDER BY h.horoscop_date DESC 
      LIMIT 20
    `,
      [userId]
    );

    client.release();

    res.json({
      success: true,
      horoscopes: result.rows.map((row) => ({
        id: row.id,
        date: row.horoscop_date,
        content: row.response,
        name: row.first_name,
        zodiac: row.zodiac,
      })),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(500).json({
      success: false,
      message: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤",
      error: error.message,
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
app.post("/api/horoscope", async (req, res) => {
  try {
    const { name, zodiac, date, birthday, isLoggedIn, userId } = req.body || {};

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É AI –∏ mock –¥–∞–Ω–Ω—ã–º–∏
    // 0 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI API, 1 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const USE_MOCK_DATA = 0; // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ 1 –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    console.log(
      `–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${userId}, –¥–∞—Ç–∞ ${date}, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω: ${isLoggedIn}`
    );

    // –î–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    if (isLoggedIn && userId) {
      console.log(
        `üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ –¥–∞—Ç—É ${date}`
      );

      const client = await pool.connect();
      try {
        const existingHoroscope = await client.query(
          "SELECT response FROM horoscops WHERE id_user = $1 AND horoscop_date = $2",
          [userId, date]
        );

        if (existingHoroscope.rows.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î –¥–ª—è –¥–∞—Ç—ã ${date}`);
          try {
            const responseData = existingHoroscope.rows[0].response;
            let savedResponse;

            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (typeof responseData === "object" && responseData !== null) {
              savedResponse = responseData;
            } else {
              // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º JSON
              savedResponse = JSON.parse(responseData);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
            await new Promise((resolve) => setTimeout(resolve, 1500));
            console.log(
              `‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`
            );

            return res.json(savedResponse);
          } catch (parseError) {
            console.error(
              `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:`,
              parseError.message
            );
            console.log(`‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞`);
          }
        } else {
          console.log(
            `‚ÑπÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –¥–∞—Ç—É ${date} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π`
          );
        }
      } catch (dbError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:", dbError.message);
      } finally {
        client.release();
      }
    }

    const infoSections = [
      "General",
      "Work",
      "Health",
      "Finance",
      "Travel",
      "Relationships",
      "Advice",
    ];

    let result;

    if (USE_MOCK_DATA === 1) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (mock)");
      result = {
        horoscope: {
          General: `Hello ${name}! As a ${zodiac}, today brings exciting opportunities for personal growth and self-discovery. The stars align favorably for you, encouraging bold decisions and positive changes in your life.`,
          Work: "Your professional life shows promising developments today. New projects may come your way, and your creative abilities will be particularly sharp. Collaboration with colleagues will lead to innovative solutions.",
          Health:
            "Pay attention to your physical well-being today. A balanced diet and regular exercise will boost your energy levels significantly. Consider trying a new wellness routine or meditation practice.",
          Finance:
            "Financial opportunities are on the horizon, but careful planning is essential. Avoid impulsive purchases and focus on long-term investment strategies. A financial advisor's guidance could prove valuable.",
          Travel:
            "Travel plans may face minor delays, but these setbacks will lead to unexpected discoveries. Local exploration might bring more joy than distant journeys. Keep your travel documents updated.",
          Relationships:
            "Your charm and charisma are at their peak today. Single individuals may encounter someone special, while those in relationships should focus on deeper communication. Family bonds strengthen through shared activities.",
          Advice:
            "Trust your intuition and embrace change with confidence. The universe supports your efforts toward personal transformation. Remember that patience and persistence will lead to remarkable achievements.",
        },
      };
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API
      const prompt = `–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º JSON —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏: ${infoSections.join(
        ", "
      )}. 
          –û—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω –∞–±–∑–∞—Ü —Å –Ω–µ –º–µ–Ω–µ–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. 
          –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ò–º—è: ${name}, –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${zodiac}, –î–∞—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: ${date}. 
          –°–¥–µ–ª–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —ç—Ç—É –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –í —Ä–∞–∑–¥–µ–ª–µ "General" –æ–±—Ä–∞—Ç–∏—Å—å –ø–æ –∏–º–µ–Ω–∏.
          –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:
          {
            "horoscope": {
              "General": "...",
              "Work": "...",
              "Health": "...",
              "Finance": "...",
              "Travel": "...",
              "Relationships": "...",
              "Advice": "..."
            }
          }
      
      –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞.`;

      try {
        console.log("–î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API");
        // –í—ã–∑–æ–≤ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.7,
        });

        result = JSON.parse(completion.choices[0].message.content);
        console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API");
      } catch (openaiError) {
        console.error("OpenAI Error:", openaiError);

        // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        console.log("OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
        result = {
          horoscope: {
            General: `Hello ${name}! As a ${zodiac}, today brings exciting opportunities for personal growth and self-discovery. The stars align favorably for you, encouraging bold decisions and positive changes in your life.`,
            Work: "Your professional life shows promising developments today. New projects may come your way, and your creative abilities will be particularly sharp. Collaboration with colleagues will lead to innovative solutions.",
            Health:
              "Pay attention to your physical well-being today. A balanced diet and regular exercise will boost your energy levels significantly. Consider trying a new wellness routine or meditation practice.",
            Finance:
              "Financial opportunities are on the horizon, but careful planning is essential. Avoid impulsive purchases and focus on long-term investment strategies. A financial advisor's guidance could prove valuable.",
            Travel:
              "Travel plans may face minor delays, but these setbacks will lead to unexpected discoveries. Local exploration might bring more joy than distant journeys. Keep your travel documents updated.",
            Relationships:
              "Your charm and charisma are at their peak today. Single individuals may encounter someone special, while those in relationships should focus on deeper communication. Family bonds strengthen through shared activities.",
            Advice:
              "Trust your intuition and embrace change with confidence. The universe supports your efforts toward personal transformation. Remember that patience and persistence will lead to remarkable achievements.",
          },
        };
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (isLoggedIn && userId) {
      console.log(
        `–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}, –¥–∞—Ç–∞: ${date}`
      );

      const client = await pool.connect();
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingHoroscope = await client.query(
          "SELECT id FROM horoscops WHERE id_user = $1 AND horoscop_date = $2",
          [userId, date]
        );

        if (existingHoroscope.rows.length === 0) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
          const insertResult = await client.query(
            "INSERT INTO horoscops (id_user, horoscop_date, response) VALUES ($1, $2, $3) RETURNING id",
            [userId, date, JSON.stringify(result)]
          );

          console.log(
            `‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: ${insertResult.rows[0].id}`
          );
        } else {
          console.log(
            "‚ÑπÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"
          );
        }
      } catch (dbError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", dbError.message);
        console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", dbError);
      } finally {
        client.release();
      }
    } else {
      console.log(
        "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏–ª–∏ userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"
      );
      console.log("isLoggedIn:", isLoggedIn, "userId:", userId);
    }

    res.json(result);
  } catch (error) {
    console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ /api/horoscope:", error);
    console.error("‚ùå Stack trace:", error.stack);
    console.error("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.message);
    res
      .status(500)
      .json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞", details: error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
app.get("/api/horoscopes", async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT h.*, u.first_name, u.birthday, u.zodiac 
      FROM horoscops h 
      JOIN users u ON h.id_user = u.id_user 
      ORDER BY h.horoscop_date DESC 
      LIMIT 10
    `);

    res.json({
      success: true,
      horoscopes: result.rows,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤:", error);
    res.status(500).json({
      success: false,
      message: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤",
      error: error.message,
    });
  }
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
});
