// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", function () {
  // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  cleanURLFromSensitiveData();

  checkAuthStatus();
});

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ URL –æ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function cleanURLFromSensitiveData() {
  const urlParams = new URLSearchParams(window.location.search);
  const sensitiveParams = ["email", "password", "pass", "login"];
  let hasChanged = false;

  for (const param of sensitiveParams) {
    if (urlParams.has(param)) {
      urlParams.delete(param);
      hasChanged = true;
    }
  }

  if (hasChanged) {
    const newURL =
      window.location.pathname +
      (urlParams.toString() ? "?" + urlParams.toString() : "") +
      window.location.hash;
    window.history.replaceState({}, "", newURL);
    logInfo("–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ URL");
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
function checkAuthStatus() {
  const isLoggedIn = localStorage.getItem("isLoggedIn");
  const userStr = localStorage.getItem("user");

  if (isLoggedIn && userStr) {
    const user = JSON.parse(userStr);
    showUserButtons(user);
  } else {
    showGuestButtons();
  }
}

function showUserButtons(user) {
  document.getElementById("guestButtons").style.display = "none";
  document.getElementById("userButtons").style.display = "flex";
  document.getElementById("userName").textContent = user.name;
}

function showGuestButtons() {
  console.log("üîÑ showGuestButtons() –≤—ã–∑–≤–∞–Ω–∞");
  document.getElementById("guestButtons").style.display = "flex";
  document.getElementById("userButtons").style.display = "none";

  // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≥–æ—Å—Ç–µ–≤–æ–º—É —Ä–µ–∂–∏–º—É —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  const resultForm = document.getElementById("result_form");
  if (resultForm && !resultForm.classList.contains("form-hidden")) {
    resultForm.classList.add("form-hidden");
    resultForm.style.display = "none";
    console.log("‚úÖ –°–∫—Ä—ã—Ç –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≥–æ—Å—Ç–µ–≤–æ–º—É —Ä–µ–∂–∏–º—É");
  } else if (resultForm) {
    console.log("‚ÑπÔ∏è –ë–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–∂–µ —Å–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
  } else {
    console.log("‚ùå –≠–ª–µ–º–µ–Ω—Ç result_form –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  const horoscopeDiv = document.getElementById("horoscope");
  if (horoscopeDiv && horoscopeDiv.innerHTML.trim() !== "") {
    horoscopeDiv.innerHTML = "";
    console.log("‚úÖ –û—á–∏—â–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –≤ showGuestButtons");
  }
}

function openLogin() {
  window.location.href = "/login.html";
}

function openRegister() {
  window.location.href = "/register.html";
}

function openProfile() {
  window.location.href = "/profile.html";
}

function logout() {
  console.log("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è logout –≤ app.js –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!");
  console.log("‚ö†Ô∏è –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è logout –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ login.js");

  const logoutId = Math.random().toString(36).substr(2, 9);
  console.log(`üîÑ [${logoutId}] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å logout`);
  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?")) {
    console.log(`‚úÖ [${logoutId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã—Ö–æ–¥`);

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    localStorage.removeItem("user");
    localStorage.removeItem("isLoggedIn");
    localStorage.removeItem("horoscopeResponse");
    localStorage.removeItem("horoscopeResult"); // —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
    localStorage.removeItem("info"); // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–µ
    console.log(`‚úÖ [${logoutId}] –û—á–∏—â–µ–Ω localStorage`);

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫–µ—à–∞ –¥–ª—è –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    Object.keys(localStorage).forEach((key) => {
      if (key.startsWith("horoscope_cache_")) {
        localStorage.removeItem(key);
        console.log(`‚úÖ [${logoutId}] –£–¥–∞–ª–µ–Ω –∫–µ—à:`, key);
      }
    });

    // –û—á–∏—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    const horoscopeDiv = document.getElementById("horoscope");
    if (horoscopeDiv) {
      console.log(
        `üîç [${logoutId}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ horoscope –¥–æ –æ—á–∏—Å—Ç–∫–∏:`,
        horoscopeDiv.innerHTML.substring(0, 100)
      );
      horoscopeDiv.innerHTML = "";
      horoscopeDiv.textContent = "";
      horoscopeDiv.innerText = "";

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      while (horoscopeDiv.firstChild) {
        horoscopeDiv.removeChild(horoscopeDiv.firstChild);
      }

      console.log(`‚úÖ [${logoutId}] –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é`);
      console.log(
        `üîç [${logoutId}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ horoscope –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:`,
        horoscopeDiv.innerHTML
      );
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    const resultForm = document.getElementById("result_form");
    if (resultForm) {
      console.log(
        `üîç [${logoutId}] –ö–ª–∞—Å—Å—ã resultForm –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`,
        resultForm.className
      );
      console.log(
        `üîç [${logoutId}] –°—Ç–∏–ª—å display –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`,
        resultForm.style.display
      );
      console.log(
        `üîç [${logoutId}] –í–∏–¥–∏–º–æ—Å—Ç—å resultForm –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`,
        resultForm.offsetHeight,
        "x",
        resultForm.offsetWidth
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–∫—Ä—ã—Ç–∏—è
      resultForm.classList.add("form-hidden");
      resultForm.style.display = "none";
      resultForm.style.visibility = "hidden";
      resultForm.style.opacity = "0";
      resultForm.style.height = "0";
      resultForm.style.overflow = "hidden";
      resultForm.setAttribute("hidden", "true");

      console.log(
        `‚úÖ [${logoutId}] –°–∫—Ä—ã—Ç –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏`
      );
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Å—Ç–∏–ª—è
    if (resultForm) {
      console.log(
        `‚úÖ [${logoutId}] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`
      );
      console.log(
        `üîç [${logoutId}] –ö–ª–∞—Å—Å—ã resultForm –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`,
        resultForm.className
      );
      console.log(
        `üîç [${logoutId}] –°—Ç–∏–ª—å display –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`,
        resultForm.style.display
      );
      console.log(
        `üîç [${logoutId}] –í–∏–¥–∏–º–æ—Å—Ç—å resultForm –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`,
        resultForm.offsetHeight,
        "x",
        resultForm.offsetWidth
      );
    }

    // –û—á–∏—â–∞–µ–º –í–°–ï –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    const U_name = document.getElementById("user_name");
    const U_birthday = document.getElementById("user_birthday");
    const U_date = document.getElementById("user_date");

    if (U_name) {
      U_name.value = "";
      console.log("‚úÖ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ –∏–º–µ–Ω–∏");
    }
    if (U_birthday) {
      U_birthday.value = "";
      console.log("‚úÖ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è");
    }
    if (U_date) {
      U_date.value = "";
      console.log("‚úÖ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ –¥–∞—Ç—ã");
    }

    // –û—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    const zodiacImg = document.getElementById("zodiac_img");
    if (zodiacImg) {
      zodiacImg.src = "";
      console.log("‚úÖ –û—á–∏—â–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞");
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    const form = document.getElementById("user_form");
    if (form) {
      form.reset();
      console.log("‚úÖ –§–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log("üîÑ –í—ã–∑—ã–≤–∞–µ–º checkAuthStatus()");
    checkAuthStatus();

    console.log("‚úÖ Logout –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω—ã");

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ logout
    setTimeout(() => {
      const horoscopeCheck = document.getElementById("horoscope");
      const resultFormCheck = document.getElementById("result_form");
      console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ logout:");
      console.log(
        "  - horoscope —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:",
        horoscopeCheck ? horoscopeCheck.innerHTML.substring(0, 50) : "–Ω–µ –Ω–∞–π–¥–µ–Ω"
      );
      console.log(
        "  - result_form –∫–ª–∞—Å—Å—ã:",
        resultFormCheck ? resultFormCheck.className : "–Ω–µ –Ω–∞–π–¥–µ–Ω"
      );
      console.log(
        "  - result_form display:",
        resultFormCheck ? resultFormCheck.style.display : "–Ω–µ –Ω–∞–π–¥–µ–Ω"
      );
    }, 100);

    alert("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
  } else {
    console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã—Ö–æ–¥");
  }
}

// Loading spinner
function showLoading() {
  document.getElementById("loadingOverlay").style.display = "flex";
}
function hideLoading() {
  document.getElementById("loadingOverlay").style.display = "none";
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isUserLoggedIn() {
  return localStorage.getItem("isLoggedIn") === "true";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
function getCacheKey(name, date, zodiac) {
  return `horoscope_${name}_${date}_${zodiac}`;
}

function isValidCache(cacheData) {
  if (!cacheData || !cacheData.timestamp) return false;

  const cacheTime = new Date(cacheData.timestamp);
  const now = new Date();
  const hoursDiff = (now - cacheTime) / (1000 * 60 * 60);

  return hoursDiff < 24; // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
function findExistingHoroscopeCache(name, birthday, date) {
  console.log("üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à –¥–ª—è:", { name, birthday, date });

  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
  let zodiac = null;
  if (birthday && typeof getZodiacSignFromString === "function") {
    zodiac = getZodiacSignFromString(birthday);
  }

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ localStorage
  for (let key of Object.keys(localStorage)) {
    if (key.startsWith("horoscope_") && key.includes("_" + date + "_")) {
      try {
        const cacheData = JSON.parse(localStorage.getItem(key));
        if (cacheData && isValidCache(cacheData)) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–ª—é—á–∞
          const parts = key.split("_");
          if (parts.length >= 4) {
            const cachedName = parts[1];
            const cachedDate = parts[2];
            const cachedZodiac = parts[3];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const nameMatch =
              name && cachedName.toLowerCase() === name.toLowerCase();
            const dateMatch = cachedDate === date;
            const zodiacMatch = zodiac && cachedZodiac === zodiac;

            if (nameMatch && dateMatch && zodiacMatch) {
              console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—ç—à:", key);
              return cacheData;
            }
          }
        }
      } catch (e) {
        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞:", key, e);
      }
    }
  }

  console.log("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–π –∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω");
  return null;
}

// –°–µ–∫—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
const infoSections = [
  "General",
  "Work",
  "Health",
  "Finance",
  "Travel",
  "Relationships",
  "Advice",
];

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê
function displayHoroscopeResult(result, info) {
  let html = `<div class="horoscopeResult"> <h2>Horoscope for ${info.name} (${info.zodiac})</h2>`;
  infoSections.forEach((section) => {
    console.log(
      `–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${section}: ${result.horoscope?.[section] || "-"}`
    );
    html += `<p><b>${section}:</b> ${result.horoscope?.[section] || "-"}</p>`;
  });
  html += `</div>`;

  document.getElementById("horoscope").innerHTML = html;
  const resultFormElement = document.getElementById("result_form");

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å–∫—Ä—ã—Ç–∏—è
  resultFormElement.classList.remove("form-hidden");
  resultFormElement.style.display = "";
  resultFormElement.style.visibility = "";
  resultFormElement.style.opacity = "";
  resultFormElement.style.height = "";
  resultFormElement.style.overflow = "";
  resultFormElement.removeAttribute("hidden");

  console.log("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞, —Å–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ —Å—Ç–∏–ª–∏ —Å–∫—Ä—ã—Ç–∏—è");

  const resultBox = document.querySelector("#horoscope .horoscopeResult");

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (resultBox) {
    resultBox.style.backgroundImage = `url('img/zodiac/${info.zodiac}.png')`;
    resultBox.style.backgroundSize = "cover";
    resultBox.style.backgroundRepeat = "no-repeat";
    resultBox.style.backgroundPosition = "center";
    resultBox.style.opacity = "0.9";

    // –î–æ–±–∞–≤–ª—è–µ–º overlay –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    let overlay = document.createElement("div");
    overlay.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
    resultBox.parentElement.appendChild(overlay);
  }
}

// restore localStorage
window.addEventListener("load", () => {
  console.log("üîÑ –°–æ–±—ã—Ç–∏–µ load —Å—Ä–∞–±–æ—Ç–∞–ª–æ");
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:");
  console.log("  - info:", localStorage.getItem("info"));
  console.log("  - isLoggedIn:", localStorage.getItem("isLoggedIn"));
  console.log("  - user:", localStorage.getItem("user"));

  // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  // –ù–û –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  restoreFormFromLocalStorage();

  // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const isLoggedIn = localStorage.getItem("isLoggedIn");
  const userData = localStorage.getItem("user");

  if (isLoggedIn === "true" && userData) {
    try {
      const user = JSON.parse(userData);
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
      fillFormWithUserData(user);
      console.log("‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

      // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      // –ì–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log(
        "‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∫–ª—é—á–µ–Ω–∞"
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  setupCalendarLimits();
});

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function restoreFormFromLocalStorage() {
  console.log("üîÑ –ó–∞–ø—É—Å–∫ restoreFormFromLocalStorage()");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –∫–ª—é—á–∞ - user (–æ—Å–Ω–æ–≤–Ω–æ–π) –∏ info (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const savedUser = JSON.parse(localStorage.getItem("user") || "{}");
  const savedInfo = JSON.parse(localStorage.getItem("info") || "{}");
  console.log("üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ localStorage (user):", savedUser);
  console.log("üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ localStorage (info):", savedInfo);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ info
  const dataToUse = Object.keys(savedUser).length > 0 ? savedUser : savedInfo;
  console.log("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", dataToUse);

  const U_name = document.getElementById("user_name");
  const U_birthday = document.getElementById("user_birthday");
  const U_date = document.getElementById("user_date");

  console.log("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM:", {
    U_name: !!U_name,
    U_birthday: !!U_birthday,
    U_date: !!U_date,
  });

  // –í—Å–µ–≥–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  if (dataToUse.name && U_name) {
    U_name.value = dataToUse.name;
    console.log("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∏–∑ localStorage:", dataToUse.name);
  } else {
    console.log("‚ÑπÔ∏è –ò–º—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", {
      hasName: !!dataToUse.name,
      hasElement: !!U_name,
    });
  }

  if (dataToUse.birthday && U_birthday) {
    U_birthday.value = dataToUse.birthday;
    console.log(
      "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ localStorage:",
      dataToUse.birthday
    );
  } else {
    console.log("‚ÑπÔ∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", {
      hasBirthday: !!dataToUse.birthday,
      hasElement: !!U_birthday,
    });
  }

  if (dataToUse.date && U_date) {
    U_date.value = dataToUse.date;
    console.log(
      "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –∏–∑ localStorage:",
      dataToUse.date
    );
  } else {
    console.log("‚ÑπÔ∏è –î–∞—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:", {
      hasDate: !!dataToUse.date,
      hasElement: !!U_date,
    });
  }

  // –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  // –ì–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log(
    "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
  if (!isLoggedIn) {
    console.log(
      "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –∫–µ—à –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è"
    );

    // –ù–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—ç—à –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (dataToUse.name && dataToUse.birthday && dataToUse.date) {
      const existingCache = findExistingHoroscopeCache(
        dataToUse.name,
        dataToUse.birthday,
        dataToUse.date
      );
      if (existingCache) {
        console.log(
          "üí° –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        );
      }
    }
  } else {
    console.log(
      "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –∫–µ—à –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è"
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function fillFormWithUserData(user) {
  const U_name = document.getElementById("user_name");
  const U_birthday = document.getElementById("user_birthday");

  if (U_name) U_name.value = user.name || "";
  if (U_birthday && user.birthday) {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è input[type="date"]
    const birthDate = new Date(user.birthday);
    const formattedDate = birthDate.toISOString().split("T")[0];
    U_birthday.value = formattedDate;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function loadUserHoroscopeForToday(user) {
  if (!user.birthday) return;

  const today = new Date().toISOString().split("T")[0];
  const zodiac = getZodiacSignFromString(user.birthday);

  if (zodiac) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    document.getElementById("name").value = user.name || "";
    document.getElementById("zodiac").value = zodiac;
    document.getElementById("date").value = today;
    if (user.birthday) {
      const birthDate = new Date(user.birthday);
      const formattedDate = birthDate.toISOString().split("T")[0];
      document.getElementById("birthday").value = formattedDate;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function setupCalendarLimits() {
  const U_date = document.getElementById("user_date");
  const U_birthday = document.getElementById("user_birthday");

  if (U_date) {
    const today = new Date().toISOString().split("T")[0];
    U_date.setAttribute("min", today);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    if (!U_date.value) {
      U_date.value = today;
    }
  }

  if (U_birthday) {
    const today = new Date().toISOString().split("T")[0];
    U_birthday.setAttribute("max", today);
  }
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getZodiacSign –∏–∑ client-utils.js (—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –æ—Ç—Å—é–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)

// Form zodiac image
function showZodiacImage(zodiac) {
  const imageContainer = document.getElementById("zodiac_img");
  if (!imageContainer) return;
  let src = zodiac !== "unknown" ? `img/zodiac/${zodiac}.png` : "";
  imageContainer.src = src;
}

//Button processing
document.getElementById("submit_btn").addEventListener("click", async (e) => {
  const isLoggedIn = isUserLoggedIn();
  e.preventDefault();

  showLoading();

  document.getElementById("horoscope").innerHTML = "";
  const U_name = document.getElementById("user_name");
  const U_birthday = document.getElementById("user_birthday");
  const U_date = document.getElementById("user_date");
  const today = new Date().toISOString().split("T")[0];

  //Check inputs dates
  if (U_birthday.value > today) {
    alert("Birthday cannot be in the future. Please, select a valid date.");
    hideLoading();
    return;
  }
  if (U_date.value < today) {
    alert(
      "Date of horoscope cannot be in the past. Please, select a valid date."
    );
    hideLoading();
    return;
  }

  // Get zodiac sign
  let zodiac = getZodiacSignFromString(U_birthday.value.trim());
  let info = {
    name: U_name.value.trim(),
    birthday: U_birthday.value.trim(),
    date: U_date.value.trim(),
    zodiac: zodiac,
  };

  if (isLoggedIn) {
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –∑–æ–¥–∏–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    const user = JSON.parse(localStorage.getItem("user") || "{}");
    if ((!info.birthday || !zodiac) && user.zodiac) {
      zodiac = user.zodiac;
      info.zodiac = user.zodiac;
    }
  }

  //Save info to localStorage
  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
  // const isLoggedIn = isUserLoggedIn(); // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∞ –≤—ã—à–µ

  if (isLoggedIn) {
    // –ó–ê–õ–û–ì–ò–ù–ï–ù–ù–´–ô: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage-–∫—ç—à, —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
    // –û–±–Ω–æ–≤–ª—è–µ–º user-–¥–∞–Ω–Ω—ã–µ –≤ localStorage
    const existingUser = JSON.parse(localStorage.getItem("user") || "{}");
    const updatedUser = {
      ...existingUser,
      name: info.name,
      birthday: info.birthday,
      date: info.date,
      zodiac: info.zodiac,
    };
    localStorage.setItem("user", JSON.stringify(updatedUser));
    console.log(
      "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ localStorage (user):",
      updatedUser
    );

    let result;
    try {
      const user = JSON.parse(localStorage.getItem("user"));
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –∑–æ–¥–∏–∞–∫ ‚Äî —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –∑–æ–¥–∏–∞–∫
      const zodiacToSend = info.zodiac || user.zodiac;
      const requestData = {
        name: user.name,
        zodiac: zodiacToSend,
        date: info.date,
        birthday: user.birthday,
        userId: user.id,
        isLoggedIn: true,
      };
      const response = await fetch("/api/horoscope", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestData),
      });
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);
      result = await response.json();
      console.log("Server response:", result);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
      localStorage.setItem("horoscopeResult", JSON.stringify(result));
      // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º info —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–æ–¥–∏–∞–∫–æ–º
      displayHoroscopeResult(result, info);
      hideLoading();
    } catch (err) {
      console.error("Error:", err);
      document.getElementById("horoscope").innerHTML =
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.";
      hideLoading();
      return;
    }
    return;
  } else {
    // –ì–û–°–¢–¨: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    if (!info.name || !info.birthday) {
      alert("To get a horoscope, you must enter your name and date of birth.");
      hideLoading();
      return;
    }
    // —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ localStorage, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    const cachedData = findExistingHoroscopeCache(
      info.name,
      info.birthday,
      info.date
    );
    if (cachedData) {
      console.log(
        "‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∫—ç—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
      );
      setTimeout(() => {
        displayHoroscopeResult(cachedData.data, info);
        hideLoading();
      }, 800);
      return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    localStorage.setItem("info", JSON.stringify(info));
    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage (info):", info);
    let result;
    try {
      const requestData = {
        name: info.name,
        zodiac: info.zodiac,
        date: info.date,
        birthday: info.birthday,
        isLoggedIn: false,
      };
      const response = await fetch("/api/horoscope", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestData),
      });
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);
      result = await response.json();
      console.log("Server response:", result);
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const cacheKey = getCacheKey(info.name, info.date, info.zodiac);
      const cacheData = { data: result, timestamp: new Date().toISOString() };
      localStorage.setItem(cacheKey, JSON.stringify(cacheData));
      displayHoroscopeResult(result, info);
      hideLoading();
    } catch (err) {
      console.error("Error:", err);
      document.getElementById("horoscope").innerHTML =
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞.";
      hideLoading();
      return;
    }
  }
});
