// login.js - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ client-utils.js)
document.addEventListener("DOMContentLoaded", function () {
  // === –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è ===
  if (document.getElementById("profileZodiac"))
    fillZodiacSelect("profileZodiac");
  const profileBirthdayInput = document.getElementById("profileBirthday");
  const profileNoBirthdayCheckbox =
    document.getElementById("profileNoBirthday");
  const profileZodiacSelect = document.getElementById("profileZodiac");
  const profileZodiacGroup = document.getElementById("profileZodiacGroup");
  const profileBirthdayGroup = document.getElementById("profileBirthdayGroup");

  function updateProfileFieldsByState() {
    if (
      !profileBirthdayInput ||
      !profileNoBirthdayCheckbox ||
      !profileZodiacSelect ||
      !profileZodiacGroup
    )
      return;
    if (profileBirthdayInput.value) {
      profileNoBirthdayCheckbox.checked = false;
      profileBirthdayInput.disabled = false;
      profileZodiacSelect.disabled = true;
      profileZodiacGroup.style.display = "block";
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
      if (typeof getZodiacSignFromString === "function") {
        profileZodiacSelect.value = getZodiacSignFromString(
          profileBirthdayInput.value
        );
      }
    } else if (profileNoBirthdayCheckbox.checked) {
      profileBirthdayInput.value = "";
      profileBirthdayInput.disabled = true;
      profileZodiacSelect.disabled = false;
      profileZodiacGroup.style.display = "block";
    } else {
      profileBirthdayInput.disabled = false;
      profileZodiacSelect.disabled = true;
      profileZodiacGroup.style.display = "block";
    }
  }

  if (profileBirthdayInput) {
    profileBirthdayInput.addEventListener("change", updateProfileFieldsByState);
  }
  if (profileNoBirthdayCheckbox) {
    profileNoBirthdayCheckbox.addEventListener("change", function () {
      if (profileNoBirthdayCheckbox.checked) {
        profileBirthdayInput.value = "";
        profileBirthdayInput.disabled = true;
        profileZodiacSelect.disabled = false;
        profileZodiacGroup.style.display = "block";
      } else {
        profileBirthdayInput.disabled = false;
        profileZodiacSelect.disabled = true;
        profileZodiacGroup.style.display = "block";
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
        if (
          profileBirthdayInput.value &&
          typeof getZodiacSignFromString === "function"
        ) {
          profileZodiacSelect.value = getZodiacSignFromString(
            profileBirthdayInput.value
          );
        }
      }
    });
  }
  // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã —Ç–æ–∂–µ –≤—ã–∑—ã–≤–∞—Ç—å
  updateProfileFieldsByState();
  // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞,
  // –Ω–æ –ù–ï –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  checkUserSessionForInterface();

  const loginForm = document.getElementById("loginForm");

  if (!loginForm) {
    logInfo("–§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }

  loginForm.addEventListener("submit", async function (e) {
    e.preventDefault();

    logInfo("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...");

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    clearErrors();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateLoginForm()) {
      logError("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞");
      return;
    }

    const formData = {
      email: document.getElementById("loginEmail").value.trim(),
      password: document.getElementById("loginPassword").value,
    };

    logInfo("Data for login:", {
      email: formData.email,
      password: "***—Å–∫—Ä—ã—Ç***",
    });

    try {
      logInfo("Sending authorization request...");
      const response = await fetch("/api/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      logInfo("Received server response:", response.status);
      const result = await response.json();
      logInfo("Authorization result:", result);

      if (result.success) {
        logSuccess("Authorization successful!");
        logInfo("User data from server:", result.user);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ localStorage
        localStorage.setItem("user", JSON.stringify(result.user));
        localStorage.setItem("isLoggedIn", "true");

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
        const horoscopeDiv = document.getElementById("horoscope");
        if (horoscopeDiv) {
          horoscopeDiv.innerHTML = "";
        }
        const resultForm = document.getElementById("result_form");
        if (resultForm) {
          resultForm.classList.add("form-hidden");
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (result.todayHoroscope) {
          localStorage.setItem(
            "horoscopeResponse",
            JSON.stringify(result.todayHoroscope)
          );
          console.log(
            "‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î:",
            result.todayHoroscope
          );
        } else {
          console.log("‚ÑπÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞");
        }

        showSuccess("Login successful! Updating interface...");

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        setTimeout(() => {
          if (typeof closeLoginForm === "function") {
            closeLoginForm();
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          updateAuthInterface();
          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          fillUserForm(result.user);

          // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
          // –ì–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (false && result.todayHoroscope) {
            console.log(
              "üéØ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø:",
              result.todayHoroscope
            );
            const today = new Date().toISOString().split("T")[0];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ—Å–∫–æ–ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            const horoscopeDate =
              result.todayHoroscope.date || result.todayHoroscope.horoscop_date;
            if (horoscopeDate && horoscopeDate !== today) {
              console.log(
                "‚ö†Ô∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É:",
                horoscopeDate,
                "vs",
                today
              );
              console.log("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞");
              return;
            }

            const horoscopeInfo = {
              name: result.user.name,
              zodiac: result.user.zodiac,
              date: today,
            };
            console.log("üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", horoscopeInfo);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è displayHoroscopeResult
            if (typeof displayHoroscopeResult === "function") {
              displayHoroscopeResult(result.todayHoroscope, horoscopeInfo);
              console.log("‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è");
            } else {
              console.error("‚ùå –§—É–Ω–∫—Ü–∏—è displayHoroscopeResult –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            }
          } else {
            console.log(
              "‚ÑπÔ∏è todayHoroscope –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
            );
          }

          // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
          // –ì–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (false && typeof loadUserHoroscopeForToday === "function") {
            loadUserHoroscopeForToday(result.user);
          } else {
            console.log(
              "‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –≤—Ä—É—á–Ω—É—é"
            );
          }
        }, 1000);
      } else {
        logError("Authorization error:", result.message);
        showError(
          "loginGeneralError",
          result.message || "Invalid email or password"
        );
      }
    } catch (error) {
      logError("Network error during authorization:", error);
      showError("loginGeneralError", "Connection error");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
  const profileForm = document.getElementById("profileForm");
  if (profileForm) {
    profileForm.addEventListener("submit", async function (e) {
      e.preventDefault();
      logInfo("Attempting to update profile...");
      clearProfileErrors();
      if (!validateProfileForm()) {
        logError("Profile form validation failed");
        return;
      }
      const name = document.getElementById("profileName").value.trim();
      const birthday = document.getElementById("profileBirthday").value;
      const noBirthday = document.getElementById("profileNoBirthday").checked;
      const zodiac = document.getElementById("profileZodiac").value;
      const password = document.getElementById("profilePassword").value;
      let formData = { name };
      if (noBirthday) {
        formData.birthday = null;
        formData.zodiac = zodiac;
      } else {
        formData.birthday = birthday || null;
        if (birthday && typeof getZodiacSignFromString === "function") {
          formData.zodiac = getZodiacSignFromString(birthday);
        } else {
          formData.zodiac = "";
        }
      }
      if (password) formData.password = password;
      try {
        const userData = localStorage.getItem("user");
        const user = JSON.parse(userData);
        const response = await fetch("/api/update-profile", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: user.email, ...formData }),
        });
        const result = await response.json();
        if (result.success) {
          logSuccess("Profile updated successfully!");
          const updatedUser = { ...user, ...formData };
          localStorage.setItem("user", JSON.stringify(updatedUser));
          updateAuthInterface();
          fillUserForm(updatedUser);
          const successMsg = document.getElementById("profileSuccessMessage");
          if (successMsg) {
            successMsg.textContent = "Profile updated successfully!";
            successMsg.style.display = "block";
          }
          setTimeout(() => {
            if (typeof closeProfileModal === "function") closeProfileModal();
          }, 2000);
        } else {
          logError("Profile update error:", result.message);
          showError(
            "profileGeneralError",
            result.message || "Profile update error"
          );
        }
      } catch (error) {
        logError("Network error during profile update:", error);
        showError("profileGeneralError", "Connection error");
      }
    });
  }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
function validateLoginForm() {
  let isValid = true;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
  const email = document.getElementById("loginEmail").value.trim();
  if (!email || !isValidEmail(email)) {
    showError("loginEmail", "Input a valid email");
    isValid = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
  const password = document.getElementById("loginPassword").value;
  if (!password) {
    showError("loginPassword", "Input your password");
    isValid = false;
  }

  return isValid;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
function validateProfileForm() {
  let isValid = true;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
  const name = document.getElementById("profileName").value.trim();
  if (!name) {
    showError("profileNameError", "Input your name");
    isValid = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  const birthday = document.getElementById("profileBirthday").value;
  if (birthday && !isValidBirthday(birthday)) {
    showError("profileBirthdayError", "Incorrect birthday");
    isValid = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω)
  const password = document.getElementById("profilePassword").value;
  const passwordConfirm = document.getElementById(
    "profilePasswordConfirm"
  ).value;

  if (password || passwordConfirm) {
    if (!password) {
      showError("profilePasswordError", "Input a new password");
      isValid = false;
    } else if (!isValidPassword(password)) {
      showError(
        "profilePasswordError",
        "Password must be at least 6 characters long"
      );
      isValid = false;
    } else if (password !== passwordConfirm) {
      showError("profilePasswordConfirmError", "Passwords do not match");
      isValid = false;
    }
  }

  return isValid;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É)
function checkUserSessionForInterface() {
  const isLoggedIn = localStorage.getItem("isLoggedIn");
  const userData = localStorage.getItem("user");

  if (isLoggedIn === "true" && userData) {
    try {
      const user = JSON.parse(userData);
      logInfo("–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.name);
      updateAuthInterface();
      // –ù–ï –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!
    } catch (error) {
      logError("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem("user");
      localStorage.removeItem("isLoggedIn");
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ)
function checkUserSession() {
  const isLoggedIn = localStorage.getItem("isLoggedIn");
  const userData = localStorage.getItem("user");

  if (isLoggedIn === "true" && userData) {
    try {
      const user = JSON.parse(userData);
      logInfo("–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.name);
      updateAuthInterface();
      fillUserForm(user);
    } catch (error) {
      logError("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem("user");
      localStorage.removeItem("isLoggedIn");
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateAuthInterface() {
  const userData = localStorage.getItem("user");
  if (!userData) {
    logInfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
    return;
  }

  try {
    const user = JSON.parse(userData);
    logInfo("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.name);

    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π
    const guestButtons = document.getElementById("guestButtons");
    if (guestButtons) {
      guestButtons.style.display = "none";
      logInfo("–ö–Ω–æ–ø–∫–∏ –≥–æ—Å—Ç—è —Å–∫—Ä—ã—Ç—ã");
    } else {
      logError("–≠–ª–µ–º–µ–Ω—Ç guestButtons –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userButtons = document.getElementById("userButtons");
    if (userButtons) {
      userButtons.style.display = "flex";
      logInfo("–ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑–∞–Ω—ã");

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
      const userName = document.getElementById("userName");
      if (userName) {
        userName.textContent = `Hello, ${user.name}!`;
        logInfo(
          "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:",
          `Hello, ${user.name}!`
        );
      } else {
        logError("–≠–ª–µ–º–µ–Ω—Ç userName –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
    } else {
      logError("–≠–ª–µ–º–µ–Ω—Ç userButtons –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ñ–æ—Ä–º–æ–π
    const userWelcome = document.getElementById("userWelcome");
    const welcomeMessage = document.getElementById("welcomeMessage");
    if (userWelcome && welcomeMessage) {
      welcomeMessage.textContent = `Welcome, ${user.name}!`;
      userWelcome.style.display = "block";
      logInfo("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ñ–æ—Ä–º–æ–π –ø–æ–∫–∞–∑–∞–Ω–æ:", `Welcome, ${user.name}!`);
    } else {
      logError("–≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–¥ —Ñ–æ—Ä–º–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    }

    logSuccess("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.name);
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", error);
  }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function fillUserForm(user) {
  // --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ (user_name, user_birthday, user_date) ---
  const userNameInput = document.getElementById("user_name");
  if (userNameInput) userNameInput.value = user.name || "";
  const userBirthdayInput = document.getElementById("user_birthday");
  if (userBirthdayInput) userBirthdayInput.value = user.birthday || "";
  const userDateInput = document.getElementById("user_date");
  if (userDateInput) {
    const today = new Date().toISOString().split("T")[0];
    userDateInput.value = today;
    logInfo("–î–∞—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", today);
  }
  logInfo("–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏–∑ localStorage
  localStorage.removeItem("horoscopeResult");
  localStorage.removeItem("horoscopeResponse");
  localStorage.removeItem("info");

  // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫–µ—à–∞ –¥–ª—è –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith("horoscope_cache_")) {
      localStorage.removeItem(key);
    }
  });

  const horoscopeDiv = document.getElementById("horoscope");
  if (horoscopeDiv) {
    horoscopeDiv.innerHTML = "";
  }

  // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const resultForm = document.getElementById("result_form");
  if (resultForm) {
    resultForm.classList.add("form-hidden");
    resultForm.style.display = "none";
  }

  // === –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è ===
  const profileNameInput = document.getElementById("profileName");
  if (profileNameInput) profileNameInput.value = user.name || "";
  const profileEmailInput = document.getElementById("profileEmail");
  if (profileEmailInput) profileEmailInput.value = user.email || "";
  const profileBirthdayInput = document.getElementById("profileBirthday");
  const profileNoBirthdayCheckbox =
    document.getElementById("profileNoBirthday");
  const profileZodiacSelect = document.getElementById("profileZodiac");
  if (
    profileBirthdayInput &&
    profileNoBirthdayCheckbox &&
    profileZodiacSelect
  ) {
    if (user.birthday) {
      profileBirthdayInput.value = user.birthday;
      profileNoBirthdayCheckbox.checked = false;
      profileBirthdayInput.disabled = false;
      profileZodiacSelect.disabled = true;
      if (typeof getZodiacSignFromString === "function") {
        profileZodiacSelect.value = getZodiacSignFromString(user.birthday);
      }
    } else {
      profileBirthdayInput.value = "";
      profileNoBirthdayCheckbox.checked = true;
      profileBirthdayInput.disabled = true;
      profileZodiacSelect.disabled = false;
      profileZodiacSelect.value = user.zodiac || "";
    }
    const profileZodiacGroup = document.getElementById("profileZodiacGroup");
    if (profileZodiacGroup) profileZodiacGroup.style.display = "block";
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ)
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
  logInfo("–í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...");

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ info –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
  const userNameField = document.getElementById("user_name");
  const userBirthdayField = document.getElementById("user_birthday");
  const userDateField = document.getElementById("user_date");

  if (userNameField && userBirthdayField && userDateField) {
    const currentFormData = {
      name: userNameField.value.trim(),
      birthday: userBirthdayField.value.trim(),
      date: userDateField.value.trim(),
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
    if (
      currentFormData.name ||
      currentFormData.birthday ||
      currentFormData.date
    ) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
      if (currentFormData.birthday) {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getZodiacSignFromString –∏–∑ app.js
        if (typeof getZodiacSignFromString === "function") {
          currentFormData.zodiac = getZodiacSignFromString(
            currentFormData.birthday
          );
        }
      }

      localStorage.setItem("info", JSON.stringify(currentFormData));
      console.log(
        "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ info –ø—Ä–∏ logout:",
        currentFormData
      );
    }
  }

  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  localStorage.removeItem("user");
  localStorage.removeItem("isLoggedIn");
  localStorage.removeItem("horoscopeResponse");
  localStorage.removeItem("horoscopeResult");

  // –ù–ï —É–¥–∞–ª—è–µ–º info - —Ç–∞–º –æ—Å—Ç–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  // localStorage.removeItem("info");

  // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫–µ—à–∞ –¥–ª—è –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith("horoscope_cache_")) {
      localStorage.removeItem(key);
    }
  });

  // –û–ß–ò–©–ê–ï–ú –ì–û–†–û–°–ö–û–ü - –≠–¢–û –ë–´–õ–û –ü–†–û–ë–õ–ï–ú–û–ô!
  const horoscopeDiv = document.getElementById("horoscope");
  if (horoscopeDiv) {
    horoscopeDiv.innerHTML = "";
    console.log("‚úÖ –û—á–∏—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø—Ä–∏ logout");
  }

  // –°–ö–†–´–í–ê–ï–ú –ë–õ–û–ö –†–ï–ó–£–õ–¨–¢–ê–¢–ê - –≠–¢–û –¢–û–ñ–ï –ë–´–õ–û –ü–†–û–ë–õ–ï–ú–û–ô!
  const resultForm = document.getElementById("result_form");
  if (resultForm) {
    resultForm.classList.add("form-hidden");
    resultForm.style.display = "none";
    console.log("‚úÖ –°–∫—Ä—ã—Ç –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ logout");
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π
  const guestButtons = document.getElementById("guestButtons");
  if (guestButtons) {
    guestButtons.style.display = "flex";
  }

  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userButtons = document.getElementById("userButtons");
  if (userButtons) {
    userButtons.style.display = "none";
  }

  // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ñ–æ—Ä–º–æ–π
  const userWelcome = document.getElementById("userWelcome");
  if (userWelcome) {
    userWelcome.style.display = "none";
  }

  // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
  clearUserForm();

  logSuccess("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearUserForm() {
  const userNameInput = document.getElementById("user_name");
  const userBirthdayInput = document.getElementById("user_birthday");
  const userDateInput = document.getElementById("user_date");

  if (userNameInput) userNameInput.value = "";
  if (userBirthdayInput) userBirthdayInput.value = "";
  if (userDateInput) userDateInput.value = "";
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function openProfile() {
  const userData = localStorage.getItem("user");
  if (!userData) {
    showError("profileGeneralError", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    return;
  }

  try {
    const user = JSON.parse(userData);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–æ—Ñ–∏–ª—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    fillProfileForm(user);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è
    if (typeof showProfileModal === "function") {
      showProfileModal();
    } else {
      logError("–§—É–Ω–∫—Ü–∏—è showProfileModal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
  } catch (error) {
    logError("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    showError("profileGeneralError", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
function fillProfileForm(user) {
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è
  const profileName = document.getElementById("profileName");
  if (profileName) {
    profileName.value = user.name || "";
  }

  // –ó–∞–ø–æ–ª–Ω—è–µ–º email (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–ª–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)
  const profileEmail = document.getElementById("profileEmail");
  if (profileEmail) {
    profileEmail.value = user.email || "";
  }

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
  const profileBirthday = document.getElementById("profileBirthday");
  if (profileBirthday && user.birthday) {
    profileBirthday.value = user.birthday;
  }

  // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–∞—Ä–æ–ª–µ–π
  const profilePassword = document.getElementById("profilePassword");
  const profilePasswordConfirm = document.getElementById(
    "profilePasswordConfirm"
  );
  if (profilePassword) profilePassword.value = "";
  if (profilePasswordConfirm) profilePasswordConfirm.value = "";

  // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
  clearProfileErrors();
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ–æ—Ä–º–µ –ø—Ä–æ—Ñ–∏–ª—è
function clearProfileErrors() {
  const errorElements = document.querySelectorAll(
    "#profileModal .error-message"
  );
  errorElements.forEach((element) => {
    element.style.display = "none";
    element.textContent = "";
  });

  const successElements = document.querySelectorAll(
    "#profileModal .success-message"
  );
  successElements.forEach((element) => {
    element.style.display = "none";
    element.textContent = "";
  });
}
